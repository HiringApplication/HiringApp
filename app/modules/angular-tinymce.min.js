angular.module("ui.tinymce",[]).value("uiTinymceConfig",{}).directive("uiTinymce",["$rootScope","$compile","$timeout","$window","$sce","uiTinymceConfig","uiTinymceService",function($rootScope,$compile,$timeout,$window,$sce,uiTinymceConfig,uiTinymceService){return uiTinymceConfig=uiTinymceConfig||{},uiTinymceConfig.baseUrl&&(tinymce.baseURL=uiTinymceConfig.baseUrl),{require:["ngModel","^?form"],priority:599,link:function(scope,element,attrs,ctrls){function toggleDisable(disabled){disabled?(ensureInstance(),tinyInstance&&tinyInstance.getBody().setAttribute("contenteditable",!1)):(ensureInstance(),tinyInstance&&!tinyInstance.settings.readonly&&tinyInstance.getDoc()&&tinyInstance.getBody().setAttribute("contenteditable",!0))}function ensureInstance(){tinyInstance||(tinyInstance=tinymce.get(attrs.id))}if($window.tinymce){var expression,tinyInstance,ngModel=ctrls[0],form=ctrls[1]||null,options={debounce:!0},updateView=function(editor){var content=editor.getContent({format:options.format}).trim();content=$sce.trustAsHtml(content),ngModel.$setViewValue(content),$rootScope.$$phase||scope.$digest()},uniqueId=uiTinymceService.getUniqueId();attrs.$set("id",uniqueId),expression={},angular.extend(expression,scope.$eval(attrs.uiTinymce));var debouncedUpdate=function(debouncedUpdateDelay){var debouncedUpdateTimer;return function(ed){$timeout.cancel(debouncedUpdateTimer),debouncedUpdateTimer=$timeout(function(){return function(ed){ed.isDirty()&&(ed.save(),updateView(ed))}(ed)},debouncedUpdateDelay)}}(400),setupOptions={setup:function(ed){ed.on("init",function(){ngModel.$render(),ngModel.$setPristine(),ngModel.$setUntouched(),form&&form.$setPristine()}),ed.on("ExecCommand change NodeChange ObjectResized",function(){return options.debounce?void debouncedUpdate(ed):(ed.save(),void updateView(ed))}),ed.on("blur",function(){element[0].blur(),ngModel.$setTouched(),$rootScope.$$phase||scope.$digest()}),ed.on("remove",function(){element.remove()}),uiTinymceConfig.setup&&uiTinymceConfig.setup(ed,{updateView:updateView}),expression.setup&&expression.setup(ed,{updateView:updateView})},format:expression.format||"html",selector:"#"+attrs.id};angular.extend(options,uiTinymceConfig,expression,setupOptions),$timeout(function(){options.baseURL&&(tinymce.baseURL=options.baseURL);var maybeInitPromise=tinymce.init(options);maybeInitPromise&&"function"==typeof maybeInitPromise.then?maybeInitPromise.then(function(){toggleDisable(scope.$eval(attrs.ngDisabled))}):toggleDisable(scope.$eval(attrs.ngDisabled))}),ngModel.$formatters.unshift(function(modelValue){return modelValue?$sce.trustAsHtml(modelValue):""}),ngModel.$parsers.unshift(function(viewValue){return viewValue?$sce.getTrustedHtml(viewValue):""}),ngModel.$render=function(){ensureInstance();var viewValue=ngModel.$viewValue?$sce.getTrustedHtml(ngModel.$viewValue):"";tinyInstance&&tinyInstance.getDoc()&&(tinyInstance.setContent(viewValue),tinyInstance.fire("change"))},attrs.$observe("disabled",toggleDisable),scope.$on("$tinymce:refresh",function(e,id){var eid=attrs.id;if(angular.isUndefined(id)||id===eid){var parentElement=element.parent(),clonedElement=element.clone();clonedElement.removeAttr("id"),clonedElement.removeAttr("style"),clonedElement.removeAttr("aria-hidden"),tinymce.execCommand("mceRemoveEditor",!1,eid),parentElement.append($compile(clonedElement)(scope))}}),scope.$on("$destroy",function(){ensureInstance(),tinyInstance&&(tinyInstance.remove(),tinyInstance=null)})}}}}]).service("uiTinymceService",[function(){var UITinymceService=function(){var ID_ATTR="ui-tinymce",uniqueId=0,getUniqueId=function(){return uniqueId++,ID_ATTR+"-"+uniqueId};return{getUniqueId:getUniqueId}};return new UITinymceService}]);